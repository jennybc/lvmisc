% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abort.R
\name{abort_argument}
\alias{abort_argument}
\alias{abort_argument_type}
\alias{abort_argument_length}
\alias{abort_argument_diff_length}
\alias{abort_argument_value}
\title{Abort based on issues with function argument}
\usage{
abort_argument_type(arg, must, not)

abort_argument_length(arg, must, not)

abort_argument_diff_length(arg1, arg2)

abort_argument_value(arg, valid_values)
}
\arguments{
\item{arg}{A character string with the argument name.}

\item{must}{A character string specifying a condition the argument must
fulfill.}

\item{not}{Either a character string specifying a condition the argument
must not fulfill or the bare (unquoted) argument name. In the last case,
the function evaluates the argument type (\code{abort_argument_type()}) or
length (\code{abort_argument_length()}) and displays the result in the
error message.}

\item{arg1, arg2}{A character string with the argument name.}

\item{valid_values}{A character vectpr with the vaid values.}
}
\description{
Returns a custom error condition created with
\code{\link[rlang:abort]{rlang::abort()}} with a - hopefully - more useful
error message and metadata.
}
\examples{
\dontrun{
x <- letters
if (!is.numeric(x)) {
  abort_argument_type("x", must = "be numeric", not = x)
}
}
\dontrun{
x <- 1:10
if (length(x) > 1) {
  abort_argument_length("x", must = "have length 1", not = x)
}
}
\dontrun{
x <- 1:5
y <- 1:10
if (length(x) != length(y)) {
  abort_argument_diff_length("x", "y")
}
}
\dontrun{
keep <- "no"
valid_values <- c("all", "used", "none")
if (keep \%!in\% valid_values) {
  abort_argument_value("keep", valid_values)
}
}
}
\seealso{
\code{\link[=abort_column_not_found]{abort_column_not_found()}},
\code{\link[=abort_class_not_implemented]{abort_class_not_implemented()}}
}
